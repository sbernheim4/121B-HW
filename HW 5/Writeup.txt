Problem 4.15

To solve the halting problem assume you have a Turing Machine M’ which takes as input a machine and an input in the form of <M, w>. M’ will work by printing out “YES” if M will accept w as input and “NO” if M does not accept w. Now Assume w is the input that no Turing Machine can accept. This can be done by constructing a table with all the possible Turing Machines (M1, M2, ...) at the top and all the possible inputs (w1, w2, ...) on the left side. Write a 1 if Mi accepts wi and a 0 if it doesn’t. Take the complement of the diagonal. This string never appears in any row and thus no turing machine will accept this input since the ith value of the complement will always be different from the ith value of any row. M’ will then now do one of two things. It will either say M accepts w or M rejects w. If M’ says that M accepts w and prints “YES” then there is a contradiction because M (which must have been in the list of machines in the table) accepts the input w which no turing machine accepted. If M’ says that M rejects w then this is also a contradiction because M’ then must have finished some computation on <M, w> to say that M rejects w which means M’ halted on input which no Turing Machine can accept. Therefore in either case M’ cannot determine if M will accept w since doing so would lead to a contradiction. 

Question 0

The reason this definition of if would not work is because cond is defined as an if statement so when evaluator attempts to transform cond into an if statement and evaluates it the second time through, an error will be returned since the evaluator does not know how to evaluate if statements.

(factorial 3) will not work since it uses a cond statement which is defined by if. This would lead to an error since when the evaluator attempts to evaluate the cond statement, it will be unable to evaluate the subsequent if statements. 

Question 1

