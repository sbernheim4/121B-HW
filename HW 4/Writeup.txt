Samuel Bernheim (bernheim@brandeis.edu) 2016-3-21

Problem 1 

Testing the ones and integers procedure using (print-stream ones) and (print-stream integers), I see that both work. The ones procedure outputs a list of ones and the integers procedure outputs a list of integers from 1 to infinity or until I stop the execution. I wrote a procedure which will test if a number is not divisible by 2, 3 or 5. Then I used the filter procedure passing in this procedure as the predicate and the integers stream as the stream to produce the stream of numbers not divisible by 2, 3 or 5. 

Problem 2 

I wrote two procedures, one to test if a number is divisible by 7 and one to test if a number is divisible by 3. Then I used this to create two streams, one of numbers not divisible by 7 and one of numbers not divisible by 3. Then I used interleave to combine the two streams. I then called print-stream on this new stream. The first few numbers were: 1 1 2 2 3 4 4 5 5 7 6 8 8 10 9 …

Problem 3

This new stream has several properties. First, if the index starts at 1, then every value at an even index is the index divided by 2. Second, looking at all the values at odd indices, 0 0 1 0 2 1 3 0 4 2 5, every other value starting from the first increases by 1. So taking every other value would take the values at index 1, 5, 9, 13 … and their corresponding values you get 0 1 2 3 4 … and this continues. The remaining values at indices 3, 7, 11, 15, 19 are 0 0 1 0 2 … What is interesting here is that these values repeat the original values for all odd indices. This is because alt is an inductively defined stream and so when it gets cons with itself it repeats these patterns. 0s 

Problem 4

For problem 4 I wrote a procedure which given two streams will produce another stream where each element is a pair. For example given the streams integers integers as parameters the output stream will be 
                 (1 2) (1 3) (1 4) (1 5)…
                       (2 3) (2 4) (2 5)…
                             (3 4) (3 5)…
                                   .
                                   .
                                   . 
Problem 5

For problem 5 I used something very similar to merge except added the weight parameter and then used for the comparisons in the conditional statement (<= (weight h1) (weight h2)) and (> (weight h1) (weight h2)) and then made the appropriate recursive call on merge-weighted. 

Problem 6

For problem 6 I wrote the the three weight procedures and then made the new streams for A, B and C using the merge-weighted procedure using (interleave-pairs integers integers) for the first two parameters and then the appropriate weight procedure to produce the right stream. For part C though I changed the parameters to be (interleave-pairs (stream-filter no-2-3-5 integers) where this is the stream of integers not divisible by 2 3 or 5. 

Problem 7 

