(define (sum-primes a b)
(define (iter count accum)
  (cond ((> count b) accum)
        ((prime? count) (iter (+ count 1) (+ count accum)))
        (else (iter (+ count 1) accum))))
  (iter a 0))

(define (prime? a)
  (define (prime-iter a currVal)
    (cond ((= a 1) #f)
          ((integer? (/ a currVal)) #f)
          ((< (* currVal currVal) a) (prime-iter a (+ currVal 1)))
          (else #t)))
  (prime-iter a 2))