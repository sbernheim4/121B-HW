Exercise 1.34 
(f f) would return an error since there are not enough arguments. 

--------------------------------------------------
Function Doubling

The double function is calculating exponentially increasing powers of 2.

For example,
((double 1+) 0) calculates 2^1 = 2
(((double double) 1+) 0) calculates 2^2 = 4
((((double double) double) 1+) 0) calculates 2^4 = 16
(((((double double) double) double) 1+) 0) calculates 2^16 = 65,536

In each case the exponents (1, 2, 4, 16) are with the exception of 1, squares of the previous number. Scheme cannot calculate the last call of ((((((double double) double) double) double) 1+) 0) since this is finding 2^256 and there is not enough memory to calculate such a large number.

--------------------------------------------------
Problem 1

For this problem I made two modifications to the update function. I added two if statements; one before velocity is defined and one before fuel is defined. For the first if statement I first see if there is any fuel left in which case I change the velocity to be velocity - (gravity * dt). For the second statement I check if fuel-burn - rate*dt >= fuel. If this is true fuel is set to 0, otherwise the fuel continues as normal. 

--------------------------------------------------
Problem 2 

I added a second parameter to the play procedure which represents the strategy. Then I changed the lander-loop to also accept this third parameter representing the users choice. I changed the if statements to then work with the recursive calls. 

--------------------------------------------------
Problem 3 

I made the random-choice procedure which generates a random number (0 or 1) and then returns the full-burn or no-burn procedure based on if a 0 or 1 was given. 

--------------------------------------------------
Problem 4

Similar to random-choice, height-choice takes in three parameters, two strategies and a boundary height. The procedure works by getting the current height of the ship, and then seeing if that height was >= to the boundary height the user specified. If this is true, the first strategy will be returned, otherwise the second strategy will be returned. 

--------------------------------------------------
Problem 5 

The choice method takes three parameters, three procedures. If the third procedure is true, then the first parameter (representing a strategy / procedure) is used. Otherwise the second strategy / procedure is used. 

--------------------------------------------------
Problem 6

(play (height-choice no-burn (random-choice full-burn ask-user) 40)) is the compound strategy representing: If the height is above 40 then do nothing. Otherwise randomly choose between doing a full-burn and asking the user. 

--------------------------------------------------
Problem 7 

To prove this begin with the equation V_f = V_i^2 + 2ad where V_f is final velocity, V_i is initial velocity, a is acceleration and d is distance. V_f is 0 since when the rocket lands its velocity is 0. Then by subtracting 2ad from both sides and then dividing by 2d you get -a = V_i^2 / 2d and the negative only indicates direction so its relevance affecting the equation is insignificant. 

--------------------------------------------------
Problem 8 

Implementing this procedure I just used the physics equation to solve for the fuel-burn-rate in terms of gravity, engine strength and acceleration. 

--------------------------------------------------
Problem 9 

Running play twice, once with each procedure demonstrates that using 20 instead of 30 as the height threshold lands the ship using less fuel. 

--------------------------------------------------
Problem 10 

Adding a procedure which takes fuel-burn-rate as an argument and then checks the value and then applying this procedure in the update method ensures that if the fuel-burn-rate > 1 then it is set back to 1. Otherwise its original value is returned. 

--------------------------------------------------
Problem 11

To find the minimal height from which height-choice should be run, I tested different heights until I found the lowest height from which the ship could fall. Then I wrote the optimal-constant-acc procedure which uses this height as an argument. 


